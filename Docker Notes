Docker:
-------
To package and containarize applications. And to ship them anywhere and run readily.
Docker manages the containers(which runs apps,libs,dependencies)
Docker has less isolation as containers share same underlying resources(CPU, Memory, Disk)
Docker consumes less memory, disk space and boot time. so can scale huge no of continers in a short time.

Dockers images are stored in dockerhub or docker store from where we can download images and make them run
ex: Ansible image is pulbilcy available in dockerhub, we can download it to host machine.
    Install docker on your host machine and create a container for ansible by using below command.

   docker run asnible
   docker run mongodb
   
Images vs Containers:
--------------------
Images are packages or templates for an application
Images are used to create containers
'N' no of containers can be created from same image. Each container is isolated from other even if its build from same image.
Developer writes a docker file by working with devops team from which a docker image is built. Devops team creates docker container using the docker image

    docker file -----> docker image------> docker container
    
Docker editions:
----------------
Community Edition
Enterprise Edition: Image management
                    Image security
                    Universal control plane for container management, orchestration for container runtime
                    
Docker Commands:
----------------
docker pull nginx               ---> Downloads the image of nginx from dockerhub to host machoine and will not create container
docker run nginx                ---> checks whether image is available in host machine, if not available connects to docker hub, 
                                     downloads image and creates container
docker ps                       ---> to list running containers 
docker ps -a                    ---> to list running and stopped containers
docker stop $ContainerID/Name   ---> stops a running container(most useful when container running in attch mode)
docker inspect $ContainerID/Name---> will provide more in formation about docker container
docker rm $ContainerID/Name     ---> to remove stopped/exited container perminantly. so that we can save space consumed by container
docker images                   ---> to list images on host machine
docker rmi $image_name          ---> to remove image from host machine. Make sure you delete all running containers and 
                                     dependents before removing image
docker inspect $image_name      ---> to see configuration of a docker image
                                     




Container is meant to run a specific process/application or a task. When the application/process exited or task is completed, container exits.
You can not run only os base image in a container, base image container will exit immedietly because os image has nothing to run

Ex: docker run ubuntu
container will create and exit immedietly. "docker ps" will not show image

Executing a coomand while starting/running a container:
------------------------------------------------------
Passing command to a container to run rather than exiting, you can append commands

Ex1:    docker run ubuntu sleep 5
which means a container for ubuntu is created and goes to sleep mode for 5secs and then exits.
for 5sec, container is running. "docker ps" will show show container details for 5sec. after 5secs will be in stopped status.

Ex2:    docker run -it ubuntu bash
         "-it" option will help to automatically log into container. now you are logged into container and execute commands in OS
         you will be logged into container.
     
        cat /etc/hosts
        systemctl status ssh
        exit
     
        exit command helps to exit from ubuntu container.
     
     

Executing a coomand on a running the container:
-----------------------------------------------
"docker run ubuntu sleep 100" command will run ubuntu and sleeps for 100sec means container is up and run for 100 secs
"docker ps" will show this container upto 100secs maximum after that will be in stopped state.

if you want to execute a command with in that 100secs of container living time, can do as below

Ex1:    docker exec ubuntu cat /etc/hosts
        docker exec $ContainerName Command
              




Run - attach(foreground) or detach(background):
----------------------------------------------
I have created a image for a web application. The repository name is "subhash/simple-web-app" which runs a web server on port 8080.

Ex: docker run subhash/simple-web-app
Above commnad runs in foreground meaning attached to standand output of container. 
You can't do anything on container unless it stops.

If you want to run above simple-webapp in background mode.  Containers continues to run in background.
so that we can execute commands on container.
Ex: docker run -d subhash/simple-web-app.

if you want to bring background running container to foreground 
Ex: docker attach $ConTainerID/Name


run - tag:
-----------
Docker tags help you to which version of image should be running in container.

Ex1:    docker run nginx
        This command will download latest version(tag=latest) aavailble in docker hub and createds containers
Ex2:    docker run nginx:3.6
        The command will look for 3.6 version of nginx image in dockerhub and run it.
        

run - stdin:
------------
docker run command will create a container but will take not take inputs from docker host machine

"docker run -it ubuntu bash" will take inputs now
"i" option is used for interactoive mode
"t" option is used to attach  docker host machine termincal 

run - port mapping:
------------------
when a container(simple web app) is running on a docker host machine, a dedicated internal ip is created for each container.
from docker host machine, you can access application running using http://IP:PORT/

Ex1:    "docker run subhash/simple-web-app" 
        command creates container ruuning web app on port 5000
        can be accessed using http://172.2.9.2:5000
        
if you want to access above webapp outside docker host machine, you should do port mapping between docker host machine and container.
Ex2:    "docker run -p 80:5000 subhash/simple-web-app" 
         creates a container running on port 5000 mapped to port 80 of docker host machine
         can be accesed using http://1.2.3.4:80 where 1.2.3.4 IP is docker host machine IP
         
run - volume mapping:
--------------------
docker container has its own file system with in the container. when container exits file system will be destroyed.
to avoid data loss, we can map docker container file system to docker host machine file system.

Ex1:    "docker run mysql" 
        creates a mysql container with docker container file system mapped to "/var/lib/mysql" 

Ex2:    "docker run -v /opt/datadir:/var/lib/mysql mysql" 
        will map to docker host machine file system to docker container file system.

        
Container logs:
---------------
how to see logs of a container running in background?

Ex1:    "docker run -d subhash/simple-web-app" will run container in background mode

Ex2:    "docker logs $containerName" will give logs about container.












Docker Images:
--------------
why we need to build ouw own image?
--> if you don't find a image in dockerhub as per your requirement, you can create your own image 
--> for the easy of shipping and containarizing the application


if you want to containarioze a applicatoon(flask), write down manual steps involved from which you can create image.
Manual steps involved:
---------------------
    1) OS- ubuntu
    2) update source repos using 'apt update'
    3) install dependincies using apt
    4) Install p[ython dependencies using PIP
    5) copy source code from docker host machine to docker image
    6) command to run when the image is run as container
    
Writing a docker file from maniual steps:
-----------------------------------------
create a file named Dockerfile

INSTRUCTION ARGUMENT

```
FROM ubuntu
RUN apt-get update && apt-get update -y install python
RUN pip install flask flask-mysql
copy .  /opt/source-code
ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run
```


How to buidl image from docker file locally:
--------------------------------------------
docker build . -f Dockerfile -t simple-web-app

-f is filename from. which image should build
-t is tag


to push locally created image to dockerhub:
-------------------------------------------
"docker build . -f Dockerfile -t subhashithareddy/simple-web-app" ----> build image as $AccountName/$ImageName
docker login $AccountName
docker push subhashithareddy/simple-web-app

'subhashithareddy' is dockerhub account name
'simple-web-app' is image name


docker builds images in layered architecture and caches it. Which means the previous step is stored in next step.
when a step fails, docker retrieves information form cache and starts where it failed. docker no need to rerun previous step unless any changes.

CMD vs Entrypoint:
------------------
did not understand

Environment Variables:
----------------------
Environment variables helps to supply values to a variable in application code in an image from which aconatiner is build.

Ex: "docker run -e COLOUR='blue' simple-web-app" colour blue is supplied to simple-web-app application while starting container

The list of Env varaibles can be seen in "Config:" portion of "docker inspect $ImageName" for a running container.











Docker Compose:
--------------

docker run - link: COULD BE DEPRECATED
------------------
to link a container with another conatiner(network))

Ex1: 
Front end voting web app- Python(Running in a container named Vote on port 80)
Backend databse to store voting count- Redis DB(Running in a separate container named redis)
Results web app to how results- nodejs(Running in a separate container named results)

docker run -d --name=vote -p 5000:80 voting-app
docker run -d --name=redis redis
docker run -d --name=results -p 5001:80 results-app

In a front end web based voting app(Democrats vs Republicans), when some one votes for  democrats, the count for 
democrats should be incresed by 1 in redis database(vote table with democrats and rebulic columns).

when some one votes for Democrat, the vote app code will try to connect to redis DB.
But these 2 containers are not linked which means, the vote app not able to connect to redis db which is running in separate container.

to link containers we use --link option
docker run -d --name=vote -p 5000:80 --link redis(name of container):redis(hostname)
docker run -d --name=results -p 5001:80 --link redis(name of container):redis(hostname)







When you want to up and run a complexx application consist of multiple things'(ansible,redis,simple-web-app,jenkins), 
rather than writing multiple docker files, we can use a single file to spin up multiple containers at one shot.



the above voting app can be written in a singlr docker compose as below rather than writing multiple docker files.
docker-compose.yaml: elections-app
--------------------
version: 1
redis:
    image: redis
vote: 
    image: subhashithareddy/voting-app
    ports: 
        - 5000:80
    links: 
        - redis
results:
    image: subhashithareddy/results-app
    ports: 
        - 5000:81
    links: 
        - redis
    
    
"docker-compose up" is command used to spin up 3 conatiners.


docker-compose - build:
-----------------------
when docker compose is having a custom application(vote and results), u may not have image readily available in dockerhub.
we us build option to specify directoty path  of (docker file and sourcecode of appl). so that image will be build from that local path.


docker-compose.yaml: 
redis:
    image: redis
vote: 
    build: ./voting-app          (path to locan system directory whereb docker file and source code available)
    ports: 
        - 5000:80
    links: 
        - redis
results:
    image: ./results-app        (path to locan system directory whereb docker file and source code available)
    ports: 
        - 5000:81
    links: 
        - redis
        




docker-compose - versions:
-------------------------
docker-compose.yaml:                        docker-compose.yaml:                             docker-compose.yaml: 
                                            version: 2                                       version: 3
                                            services:                                        services:
redis:                                          redis:                                          redis:
    image: redis                                    image: redis                                    image: redis
vote:                                           vote:                                           vote:
    build: ./voting-app                             build: ./voting-app                             build: ./voting-app
    ports:                                          ports:                                          ports:  
        - 5000:80                                        - 5000:80                                       - 5000:80
    links:                                          depends_on:                                     
        - redis                                          - redis                                         
results:                                        results:                                        results:
    build: ./results-app                            build: ./results-app                            build: ./results-app
    ports:                                          ports:                                          ports:
        - 5000:81                                       - 5000:81                                       - 5000:81
    links:                                          depends_on:
        - redis                                         - redis                                             
        
        
  verion 1: no need to specify
  version 2: specify version no, creates a auto bridge network(no need to specify links), depends_on option to startup order
  veriosn 3: specify version no, creates a auto bridge network(no need to specify links), docker swam(no depends_on)
  
  


docker-compose.yaml - networks:
-------------------
 version: 3
 services:
    redis:
        image: redis
    vote:
        build: ./voting-app
        ports:  
            - 5000:80
        networks: 
            - front-end
            - back-end
    results:
        build: ./results-app
        ports:
            - 5000:80
        networks:
            - front-end
            - back-end
  networks:
    front-end:
    back-end:
            
           
           
           
Docker Private Registry:
 ------------------------
Docker.io is the registry for public images provided bby docker
 
Ex: 
                    docker.io/nginx/nginx
                   Registry  Account Image
                      Name    Name    Name
                      
                      
 You can maintain private registry within your company. 
 Docker provides an image called REGISTRY which can be used used create your own private registry.
   
   
Ex: 
            "docker run -d -p 5000:5000 --name subhash.io registry:2" creates my won registry named "subhash"
            docker login subhash.io
            Username: ******
            password: *******
            Login succcesful.
        
  step1: 
  you need to tag your image first
            docker image tag my-image localhost:5000/my-image
    
  step2: 
  push image to private registry
            docker push localhost:5000/my-image
            
  step3:
  how to pull image
            docker pull localhost:5000/my-image
  Step3:
  how to run image
            docker run subhash.io/apps/first-app
            docker run subhash.io/db/db-postgree
        
                    
                    
   
                      
                      
        
        
    
 








    
    
    
    
    
    





open -a Docker --> to start docker

