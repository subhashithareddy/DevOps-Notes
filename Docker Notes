Docker:
-------
To package and containarize applications. And to ship them anywhere and run readily.
Docker manages the containers(which runs apps,libs,dependencies)
Docker has less isolation as containers share same underlying resources(CPU, Memory, Disk)
Docker consumes less memory, disk space and boot time. so can scale huge no of continers in a short time.

Dockers images are stored in dockerhub or docker store from where we can download images and make them run
ex: Ansible image is pulbilcy available in dockerhub, we can download it to host machine.
    Install docker on your host machine and create a container for ansible by using below command.

   docker run asnible
   docker run mongodb
   
Images vs Containers:
--------------------
Images are packages or templates for an application
Images are used to create containers
'N' no of containers can be created from same image. Each container is isolated from other even if its build from same image.
Developer writes a docker file by working with devops team from which a docker image is built. Devops team creates docker container using the docker image

    docker file -----> docker image------> docker container
    
Docker editions:
----------------
Community Edition
Enterprise Edition: Image management
                    Image security
                    Universal control plane for container management, orchestration for container runtime
                    
Docker Commands:
----------------
docker pull nginx               ---> Downloads the image of nginx from dockerhub to host machoine and will not create container
docker run nginx                ---> checks whether image is available in host machine, if not available connects to docker hub, 
                                     downloads image and creates container
docker ps                       ---> to list running containers 
docker ps -a                    ---> to list running and stopped containers
docker stop $ContainerID/Name   ---> stops a running container
docker rm $ContainerID/Name     ---> to remove stopped/exited container perminantly. so that we can save space consumed by container
docker images                   ---> to list images on host machine
docker rmi $image_name          ---> to remove image from host machine. Make sure you delete all running containers and 
                                     dependents before removing image
                                     




Container is meant to run a specific process/application or a task. When the application/process exited or task is completed, container exits.
You can not run os base image in a container, base image container will exit immedietly because os image has nothing to run
Ex: docker run ubuntu
container will create and exit immedietly. "docker ps" will not show image

Executing a coomand while starting/running a container:
------------------------------------------------------
Passing command to a container to run rather than exiting, you can append commands
Ex1:    docker run ubuntu sleep 5
which means a container for ubuntu is created and goes to sleep mode for 5secs and then exits.
for 5sec, container is running. "docker ps" will show show container details for 5sec. after 5secs wont show.

Ex2:    docker run -it ubuntu bash
         "-it" option will help to automatically log into container. now you are logged into container and execute commands in OS
     
        cat /etc/hosts
        systemctl status ssh
        exit
     
        exit command helps to exit from ubuntu container.
     
     

Executing a coomand on a running the container:
-----------------------------------------------
"docker run ubuntu sleep 100" command will run ubuntu and sleeps for 100sec means container is up and run for 100 secs
"docker ps" will show this container upto 100secs maximum after that will not show.

if you want to execute a command with in that 100secs of container living time, can do as below
Ex1:    docker exec ubuntu cat /etc/hosts
        docker exec $ContainerName Command
              




Run - attach(foreground) or detach(background):
----------------------------------------------
I have created a image for a web application. The repository name is "subhash/simple-web-app" which runs a web server on port 8080.
Ex: docker run subhash/simple-web-app
Above commnad runs in foreground meaning attached to standand output of container. able to see output of werservice on screen
You can't do anything on container unless it stops.

If you want to run above simple-webapp in background mode.  Containers continues to run in background.
so that we can execute commands on container.
Ex: docker run -d subhash/simple-web-app.

if you want to bring background running container to foreground 
Ex: docker attach $ConTainerID/Name


run - tag:
-----------
Docker tags help you to which version of image should be running in container.
Ex1:    docker run nginx
        This command will download latest version(tag=latest) aavailble in docker hub and createds containers
Ex2:    docker run nginx:3.6
        The command will look for 3.6 version of nginx image in dockerhub and run it.
        

run - stdin:
------------
docker run command will create a container but will take not take inputs from docker host machine

"docker run -it ubuntu bash" will take inputs now
"i" option is used for interactoive mode
"t" option is used to attach  docker host machine termincal 
        







open -a Docker --> to start docker

